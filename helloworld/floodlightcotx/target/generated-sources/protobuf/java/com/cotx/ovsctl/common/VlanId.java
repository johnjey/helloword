// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/VlanId.proto

package com.cotx.ovsctl.common;

import com.cotx.ovsctl.message.common.VlanIdOrBuilder;
import com.cotx.ovsctl.message.common.VlanIdProto;

/**
 * <pre>
 *1. define VlanId message,representation of a VLAN identifier.
 *2. AddAccessModeRequest's message item.
 *3. AddTrunkModeRequest's message item.
 * </pre>
 *
 * Protobuf type {@code VlanId}
 */
public  final class VlanId extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:VlanId)
        VlanIdOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VlanId.newBuilder() to construct.
  private VlanId(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private VlanId() {
    uNTAGGED_ = 65535;
    aNYVALUE_ = 4096;
    nOVID_ = 0;
    rESERVED_ = 4095;
    sTRINGNONE_ = "None";
    sTRINGNUMERICNONE_ = "-1";
    sTRINGANY_ = "Any";
    mAXVLAN_ = 4095;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private VlanId(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            uNTAGGED_ = input.readInt32();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            aNYVALUE_ = input.readInt32();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            nOVID_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            rESERVED_ = input.readInt32();
            break;
          }
          case 42: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000010;
            sTRINGNONE_ = bs;
            break;
          }
          case 50: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000020;
            sTRINGNUMERICNONE_ = bs;
            break;
          }
          case 58: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000040;
            sTRINGANY_ = bs;
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            mAXVLAN_ = input.readInt32();
            break;
          }
          case 74: {
            com.cotx.ovsctl.message.common.VlanId.Builder subBuilder = null;
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
              subBuilder = nONE_.toBuilder();
            }
            nONE_ = input.readMessage(com.cotx.ovsctl.message.common.VlanId.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(nONE_);
              nONE_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000100;
            break;
          }
          case 82: {
            com.cotx.ovsctl.message.common.VlanId.Builder subBuilder = null;
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
              subBuilder = aNY_.toBuilder();
            }
            aNY_ = input.readMessage(com.cotx.ovsctl.message.common.VlanId.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(aNY_);
              aNY_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000200;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return VlanIdProto.internal_static_VlanId_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return VlanIdProto.internal_static_VlanId_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.cotx.ovsctl.message.common.VlanId.class, com.cotx.ovsctl.message.common.VlanId.Builder.class);
  }

  private int bitField0_;
  public static final int UNTAGGED_FIELD_NUMBER = 1;
  private int uNTAGGED_;
  /**
   * <pre>
   *Based on convention used elsewhere? Check and change if needed
   *default value 65535
   * </pre>
   *
   * <code>required int32 UNTAGGED = 1 [default = 65535];</code>
   */
  public boolean hasUNTAGGED() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   *Based on convention used elsewhere? Check and change if needed
   *default value 65535
   * </pre>
   *
   * <code>required int32 UNTAGGED = 1 [default = 65535];</code>
   */
  public int getUNTAGGED() {
    return uNTAGGED_;
  }

  public static final int ANY_VALUE_FIELD_NUMBER = 2;
  private int aNYVALUE_;
  /**
   * <pre>
   *In a traffic selector, this means that a VLAN ID must be present,
   *but can have any value. We use the same value as OpenFlow,
   *but this is not required.
   * </pre>
   *
   * <code>optional int32 ANY_VALUE = 2 [default = 4096];</code>
   */
  public boolean hasANYVALUE() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   *In a traffic selector, this means that a VLAN ID must be present,
   *but can have any value. We use the same value as OpenFlow,
   *but this is not required.
   * </pre>
   *
   * <code>optional int32 ANY_VALUE = 2 [default = 4096];</code>
   */
  public int getANYVALUE() {
    return aNYVALUE_;
  }

  public static final int NO_VID_FIELD_NUMBER = 3;
  private int nOVID_;
  /**
   * <pre>
   *0 is not used for VLAN ID
   * </pre>
   *
   * <code>required int32 NO_VID = 3 [default = 0];</code>
   */
  public boolean hasNOVID() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   *0 is not used for VLAN ID
   * </pre>
   *
   * <code>required int32 NO_VID = 3 [default = 0];</code>
   */
  public int getNOVID() {
    return nOVID_;
  }

  public static final int RESERVED_FIELD_NUMBER = 4;
  private int rESERVED_;
  /**
   * <pre>
   *represents all tagged traffic
   * </pre>
   *
   * <code>required int32 RESERVED = 4 [default = 4095];</code>
   */
  public boolean hasRESERVED() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   *represents all tagged traffic
   * </pre>
   *
   * <code>required int32 RESERVED = 4 [default = 4095];</code>
   */
  public int getRESERVED() {
    return rESERVED_;
  }

  public static final int STRING_NONE_FIELD_NUMBER = 5;
  private volatile java.lang.Object sTRINGNONE_;
  /**
   * <code>required string STRING_NONE = 5 [default = "None"];</code>
   */
  public boolean hasSTRINGNONE() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>required string STRING_NONE = 5 [default = "None"];</code>
   */
  public java.lang.String getSTRINGNONE() {
    java.lang.Object ref = sTRINGNONE_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        sTRINGNONE_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string STRING_NONE = 5 [default = "None"];</code>
   */
  public com.google.protobuf.ByteString
      getSTRINGNONEBytes() {
    java.lang.Object ref = sTRINGNONE_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sTRINGNONE_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STRING_NUMERIC_NONE_FIELD_NUMBER = 6;
  private volatile java.lang.Object sTRINGNUMERICNONE_;
  /**
   * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
   */
  public boolean hasSTRINGNUMERICNONE() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
   */
  public java.lang.String getSTRINGNUMERICNONE() {
    java.lang.Object ref = sTRINGNUMERICNONE_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        sTRINGNUMERICNONE_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
   */
  public com.google.protobuf.ByteString
      getSTRINGNUMERICNONEBytes() {
    java.lang.Object ref = sTRINGNUMERICNONE_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sTRINGNUMERICNONE_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STRING_ANY_FIELD_NUMBER = 7;
  private volatile java.lang.Object sTRINGANY_;
  /**
   * <code>required string STRING_ANY = 7 [default = "Any"];</code>
   */
  public boolean hasSTRINGANY() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>required string STRING_ANY = 7 [default = "Any"];</code>
   */
  public java.lang.String getSTRINGANY() {
    java.lang.Object ref = sTRINGANY_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        sTRINGANY_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string STRING_ANY = 7 [default = "Any"];</code>
   */
  public com.google.protobuf.ByteString
      getSTRINGANYBytes() {
    java.lang.Object ref = sTRINGANY_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sTRINGANY_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MAX_VLAN_FIELD_NUMBER = 8;
  private int mAXVLAN_;
  /**
   * <pre>
   *A VLAN ID is actually 12 bits of a VLAN tag.
   * </pre>
   *
   * <code>required int32 MAX_VLAN = 8 [default = 4095];</code>
   */
  public boolean hasMAXVLAN() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   *A VLAN ID is actually 12 bits of a VLAN tag.
   * </pre>
   *
   * <code>required int32 MAX_VLAN = 8 [default = 4095];</code>
   */
  public int getMAXVLAN() {
    return mAXVLAN_;
  }

  public static final int NONE_FIELD_NUMBER = 9;
  private com.cotx.ovsctl.message.common.VlanId nONE_;
  /**
   * <pre>
   *TODO
   *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
   * </pre>
   *
   * <code>required .VlanId NONE = 9;</code>
   */
  public boolean hasNONE() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   *TODO
   *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
   * </pre>
   *
   * <code>required .VlanId NONE = 9;</code>
   */
  public com.cotx.ovsctl.message.common.VlanId getNONE() {
    return nONE_ == null ? com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : nONE_;
  }
  /**
   * <pre>
   *TODO
   *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
   * </pre>
   *
   * <code>required .VlanId NONE = 9;</code>
   */
  public VlanIdOrBuilder getNONEOrBuilder() {
    return nONE_ == null ? com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : nONE_;
  }

  public static final int ANY_FIELD_NUMBER = 10;
  private com.cotx.ovsctl.message.common.VlanId aNY_;
  /**
   * <code>required .VlanId ANY = 10;</code>
   */
  public boolean hasANY() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>required .VlanId ANY = 10;</code>
   */
  public com.cotx.ovsctl.message.common.VlanId getANY() {
    return aNY_ == null ? com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : aNY_;
  }
  /**
   * <code>required .VlanId ANY = 10;</code>
   */
  public VlanIdOrBuilder getANYOrBuilder() {
    return aNY_ == null ? com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : aNY_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasUNTAGGED()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasNOVID()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasRESERVED()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasSTRINGNONE()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasSTRINGNUMERICNONE()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasSTRINGANY()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasMAXVLAN()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasNONE()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasANY()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getNONE().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getANY().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, uNTAGGED_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, aNYVALUE_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, nOVID_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, rESERVED_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, sTRINGNONE_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, sTRINGNUMERICNONE_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, sTRINGANY_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt32(8, mAXVLAN_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeMessage(9, getNONE());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeMessage(10, getANY());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, uNTAGGED_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, aNYVALUE_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, nOVID_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, rESERVED_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, sTRINGNONE_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, sTRINGNUMERICNONE_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, sTRINGANY_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, mAXVLAN_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getNONE());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getANY());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.cotx.ovsctl.message.common.VlanId)) {
      return super.equals(obj);
    }
    com.cotx.ovsctl.message.common.VlanId other = (com.cotx.ovsctl.message.common.VlanId) obj;

    boolean result = true;
    result = result && (hasUNTAGGED() == other.hasUNTAGGED());
    if (hasUNTAGGED()) {
      result = result && (getUNTAGGED()
          == other.getUNTAGGED());
    }
    result = result && (hasANYVALUE() == other.hasANYVALUE());
    if (hasANYVALUE()) {
      result = result && (getANYVALUE()
          == other.getANYVALUE());
    }
    result = result && (hasNOVID() == other.hasNOVID());
    if (hasNOVID()) {
      result = result && (getNOVID()
          == other.getNOVID());
    }
    result = result && (hasRESERVED() == other.hasRESERVED());
    if (hasRESERVED()) {
      result = result && (getRESERVED()
          == other.getRESERVED());
    }
    result = result && (hasSTRINGNONE() == other.hasSTRINGNONE());
    if (hasSTRINGNONE()) {
      result = result && getSTRINGNONE()
          .equals(other.getSTRINGNONE());
    }
    result = result && (hasSTRINGNUMERICNONE() == other.hasSTRINGNUMERICNONE());
    if (hasSTRINGNUMERICNONE()) {
      result = result && getSTRINGNUMERICNONE()
          .equals(other.getSTRINGNUMERICNONE());
    }
    result = result && (hasSTRINGANY() == other.hasSTRINGANY());
    if (hasSTRINGANY()) {
      result = result && getSTRINGANY()
          .equals(other.getSTRINGANY());
    }
    result = result && (hasMAXVLAN() == other.hasMAXVLAN());
    if (hasMAXVLAN()) {
      result = result && (getMAXVLAN()
          == other.getMAXVLAN());
    }
    result = result && (hasNONE() == other.hasNONE());
    if (hasNONE()) {
      result = result && getNONE()
          .equals(other.getNONE());
    }
    result = result && (hasANY() == other.hasANY());
    if (hasANY()) {
      result = result && getANY()
          .equals(other.getANY());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasUNTAGGED()) {
      hash = (37 * hash) + UNTAGGED_FIELD_NUMBER;
      hash = (53 * hash) + getUNTAGGED();
    }
    if (hasANYVALUE()) {
      hash = (37 * hash) + ANY_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getANYVALUE();
    }
    if (hasNOVID()) {
      hash = (37 * hash) + NO_VID_FIELD_NUMBER;
      hash = (53 * hash) + getNOVID();
    }
    if (hasRESERVED()) {
      hash = (37 * hash) + RESERVED_FIELD_NUMBER;
      hash = (53 * hash) + getRESERVED();
    }
    if (hasSTRINGNONE()) {
      hash = (37 * hash) + STRING_NONE_FIELD_NUMBER;
      hash = (53 * hash) + getSTRINGNONE().hashCode();
    }
    if (hasSTRINGNUMERICNONE()) {
      hash = (37 * hash) + STRING_NUMERIC_NONE_FIELD_NUMBER;
      hash = (53 * hash) + getSTRINGNUMERICNONE().hashCode();
    }
    if (hasSTRINGANY()) {
      hash = (37 * hash) + STRING_ANY_FIELD_NUMBER;
      hash = (53 * hash) + getSTRINGANY().hashCode();
    }
    if (hasMAXVLAN()) {
      hash = (37 * hash) + MAX_VLAN_FIELD_NUMBER;
      hash = (53 * hash) + getMAXVLAN();
    }
    if (hasNONE()) {
      hash = (37 * hash) + NONE_FIELD_NUMBER;
      hash = (53 * hash) + getNONE().hashCode();
    }
    if (hasANY()) {
      hash = (37 * hash) + ANY_FIELD_NUMBER;
      hash = (53 * hash) + getANY().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cotx.ovsctl.message.common.VlanId parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.cotx.ovsctl.message.common.VlanId prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   *1. define VlanId message,representation of a VLAN identifier.
   *2. AddAccessModeRequest's message item.
   *3. AddTrunkModeRequest's message item.
   * </pre>
   *
   * Protobuf type {@code VlanId}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:VlanId)
          VlanIdOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return VlanIdProto.internal_static_VlanId_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return VlanIdProto.internal_static_VlanId_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cotx.ovsctl.message.common.VlanId.class, com.cotx.ovsctl.message.common.VlanId.Builder.class);
    }

    // Construct using VlanId.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getNONEFieldBuilder();
        getANYFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      uNTAGGED_ = 65535;
      bitField0_ = (bitField0_ & ~0x00000001);
      aNYVALUE_ = 4096;
      bitField0_ = (bitField0_ & ~0x00000002);
      nOVID_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      rESERVED_ = 4095;
      bitField0_ = (bitField0_ & ~0x00000008);
      sTRINGNONE_ = "None";
      bitField0_ = (bitField0_ & ~0x00000010);
      sTRINGNUMERICNONE_ = "-1";
      bitField0_ = (bitField0_ & ~0x00000020);
      sTRINGANY_ = "Any";
      bitField0_ = (bitField0_ & ~0x00000040);
      mAXVLAN_ = 4095;
      bitField0_ = (bitField0_ & ~0x00000080);
      if (nONEBuilder_ == null) {
        nONE_ = null;
      } else {
        nONEBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000100);
      if (aNYBuilder_ == null) {
        aNY_ = null;
      } else {
        aNYBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000200);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return VlanIdProto.internal_static_VlanId_descriptor;
    }

    public com.cotx.ovsctl.message.common.VlanId getDefaultInstanceForType() {
      return com.cotx.ovsctl.message.common.VlanId.getDefaultInstance();
    }

    public com.cotx.ovsctl.message.common.VlanId build() {
      com.cotx.ovsctl.message.common.VlanId result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.cotx.ovsctl.message.common.VlanId buildPartial() {
      com.cotx.ovsctl.message.common.VlanId result = new com.cotx.ovsctl.message.common.VlanId(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.uNTAGGED_ = uNTAGGED_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.aNYVALUE_ = aNYVALUE_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.nOVID_ = nOVID_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.rESERVED_ = rESERVED_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.sTRINGNONE_ = sTRINGNONE_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.sTRINGNUMERICNONE_ = sTRINGNUMERICNONE_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.sTRINGANY_ = sTRINGANY_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.mAXVLAN_ = mAXVLAN_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      if (nONEBuilder_ == null) {
        result.nONE_ = nONE_;
      } else {
        result.nONE_ = nONEBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      if (aNYBuilder_ == null) {
        result.aNY_ = aNY_;
      } else {
        result.aNY_ = aNYBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.cotx.ovsctl.message.common.VlanId) {
        return mergeFrom((com.cotx.ovsctl.message.common.VlanId)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.cotx.ovsctl.message.common.VlanId other) {
      if (other == com.cotx.ovsctl.message.common.VlanId.getDefaultInstance()) return this;
      if (other.hasUNTAGGED()) {
        setUNTAGGED(other.getUNTAGGED());
      }
      if (other.hasANYVALUE()) {
        setANYVALUE(other.getANYVALUE());
      }
      if (other.hasNOVID()) {
        setNOVID(other.getNOVID());
      }
      if (other.hasRESERVED()) {
        setRESERVED(other.getRESERVED());
      }
      if (other.hasSTRINGNONE()) {
        bitField0_ |= 0x00000010;
        sTRINGNONE_ = other.sTRINGNONE_;
        onChanged();
      }
      if (other.hasSTRINGNUMERICNONE()) {
        bitField0_ |= 0x00000020;
        sTRINGNUMERICNONE_ = other.sTRINGNUMERICNONE_;
        onChanged();
      }
      if (other.hasSTRINGANY()) {
        bitField0_ |= 0x00000040;
        sTRINGANY_ = other.sTRINGANY_;
        onChanged();
      }
      if (other.hasMAXVLAN()) {
        setMAXVLAN(other.getMAXVLAN());
      }
      if (other.hasNONE()) {
        mergeNONE(other.getNONE());
      }
      if (other.hasANY()) {
        mergeANY(other.getANY());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      if (!hasUNTAGGED()) {
        return false;
      }
      if (!hasNOVID()) {
        return false;
      }
      if (!hasRESERVED()) {
        return false;
      }
      if (!hasSTRINGNONE()) {
        return false;
      }
      if (!hasSTRINGNUMERICNONE()) {
        return false;
      }
      if (!hasSTRINGANY()) {
        return false;
      }
      if (!hasMAXVLAN()) {
        return false;
      }
      if (!hasNONE()) {
        return false;
      }
      if (!hasANY()) {
        return false;
      }
      if (!getNONE().isInitialized()) {
        return false;
      }
      if (!getANY().isInitialized()) {
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.cotx.ovsctl.message.common.VlanId parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.cotx.ovsctl.message.common.VlanId) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int uNTAGGED_ = 65535;
    /**
     * <pre>
     *Based on convention used elsewhere? Check and change if needed
     *default value 65535
     * </pre>
     *
     * <code>required int32 UNTAGGED = 1 [default = 65535];</code>
     */
    public boolean hasUNTAGGED() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *Based on convention used elsewhere? Check and change if needed
     *default value 65535
     * </pre>
     *
     * <code>required int32 UNTAGGED = 1 [default = 65535];</code>
     */
    public int getUNTAGGED() {
      return uNTAGGED_;
    }
    /**
     * <pre>
     *Based on convention used elsewhere? Check and change if needed
     *default value 65535
     * </pre>
     *
     * <code>required int32 UNTAGGED = 1 [default = 65535];</code>
     */
    public Builder setUNTAGGED(int value) {
      bitField0_ |= 0x00000001;
      uNTAGGED_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *Based on convention used elsewhere? Check and change if needed
     *default value 65535
     * </pre>
     *
     * <code>required int32 UNTAGGED = 1 [default = 65535];</code>
     */
    public Builder clearUNTAGGED() {
      bitField0_ = (bitField0_ & ~0x00000001);
      uNTAGGED_ = 65535;
      onChanged();
      return this;
    }

    private int aNYVALUE_ = 4096;
    /**
     * <pre>
     *In a traffic selector, this means that a VLAN ID must be present,
     *but can have any value. We use the same value as OpenFlow,
     *but this is not required.
     * </pre>
     *
     * <code>optional int32 ANY_VALUE = 2 [default = 4096];</code>
     */
    public boolean hasANYVALUE() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *In a traffic selector, this means that a VLAN ID must be present,
     *but can have any value. We use the same value as OpenFlow,
     *but this is not required.
     * </pre>
     *
     * <code>optional int32 ANY_VALUE = 2 [default = 4096];</code>
     */
    public int getANYVALUE() {
      return aNYVALUE_;
    }
    /**
     * <pre>
     *In a traffic selector, this means that a VLAN ID must be present,
     *but can have any value. We use the same value as OpenFlow,
     *but this is not required.
     * </pre>
     *
     * <code>optional int32 ANY_VALUE = 2 [default = 4096];</code>
     */
    public Builder setANYVALUE(int value) {
      bitField0_ |= 0x00000002;
      aNYVALUE_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *In a traffic selector, this means that a VLAN ID must be present,
     *but can have any value. We use the same value as OpenFlow,
     *but this is not required.
     * </pre>
     *
     * <code>optional int32 ANY_VALUE = 2 [default = 4096];</code>
     */
    public Builder clearANYVALUE() {
      bitField0_ = (bitField0_ & ~0x00000002);
      aNYVALUE_ = 4096;
      onChanged();
      return this;
    }

    private int nOVID_ ;
    /**
     * <pre>
     *0 is not used for VLAN ID
     * </pre>
     *
     * <code>required int32 NO_VID = 3 [default = 0];</code>
     */
    public boolean hasNOVID() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *0 is not used for VLAN ID
     * </pre>
     *
     * <code>required int32 NO_VID = 3 [default = 0];</code>
     */
    public int getNOVID() {
      return nOVID_;
    }
    /**
     * <pre>
     *0 is not used for VLAN ID
     * </pre>
     *
     * <code>required int32 NO_VID = 3 [default = 0];</code>
     */
    public Builder setNOVID(int value) {
      bitField0_ |= 0x00000004;
      nOVID_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *0 is not used for VLAN ID
     * </pre>
     *
     * <code>required int32 NO_VID = 3 [default = 0];</code>
     */
    public Builder clearNOVID() {
      bitField0_ = (bitField0_ & ~0x00000004);
      nOVID_ = 0;
      onChanged();
      return this;
    }

    private int rESERVED_ = 4095;
    /**
     * <pre>
     *represents all tagged traffic
     * </pre>
     *
     * <code>required int32 RESERVED = 4 [default = 4095];</code>
     */
    public boolean hasRESERVED() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *represents all tagged traffic
     * </pre>
     *
     * <code>required int32 RESERVED = 4 [default = 4095];</code>
     */
    public int getRESERVED() {
      return rESERVED_;
    }
    /**
     * <pre>
     *represents all tagged traffic
     * </pre>
     *
     * <code>required int32 RESERVED = 4 [default = 4095];</code>
     */
    public Builder setRESERVED(int value) {
      bitField0_ |= 0x00000008;
      rESERVED_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *represents all tagged traffic
     * </pre>
     *
     * <code>required int32 RESERVED = 4 [default = 4095];</code>
     */
    public Builder clearRESERVED() {
      bitField0_ = (bitField0_ & ~0x00000008);
      rESERVED_ = 4095;
      onChanged();
      return this;
    }

    private java.lang.Object sTRINGNONE_ = "None";
    /**
     * <code>required string STRING_NONE = 5 [default = "None"];</code>
     */
    public boolean hasSTRINGNONE() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required string STRING_NONE = 5 [default = "None"];</code>
     */
    public java.lang.String getSTRINGNONE() {
      java.lang.Object ref = sTRINGNONE_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sTRINGNONE_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>required string STRING_NONE = 5 [default = "None"];</code>
     */
    public com.google.protobuf.ByteString
        getSTRINGNONEBytes() {
      java.lang.Object ref = sTRINGNONE_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sTRINGNONE_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string STRING_NONE = 5 [default = "None"];</code>
     */
    public Builder setSTRINGNONE(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      sTRINGNONE_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string STRING_NONE = 5 [default = "None"];</code>
     */
    public Builder clearSTRINGNONE() {
      bitField0_ = (bitField0_ & ~0x00000010);
      sTRINGNONE_ = getDefaultInstance().getSTRINGNONE();
      onChanged();
      return this;
    }
    /**
     * <code>required string STRING_NONE = 5 [default = "None"];</code>
     */
    public Builder setSTRINGNONEBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      sTRINGNONE_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object sTRINGNUMERICNONE_ = "-1";
    /**
     * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
     */
    public boolean hasSTRINGNUMERICNONE() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
     */
    public java.lang.String getSTRINGNUMERICNONE() {
      java.lang.Object ref = sTRINGNUMERICNONE_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sTRINGNUMERICNONE_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
     */
    public com.google.protobuf.ByteString
        getSTRINGNUMERICNONEBytes() {
      java.lang.Object ref = sTRINGNUMERICNONE_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sTRINGNUMERICNONE_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
     */
    public Builder setSTRINGNUMERICNONE(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
      sTRINGNUMERICNONE_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
     */
    public Builder clearSTRINGNUMERICNONE() {
      bitField0_ = (bitField0_ & ~0x00000020);
      sTRINGNUMERICNONE_ = getDefaultInstance().getSTRINGNUMERICNONE();
      onChanged();
      return this;
    }
    /**
     * <code>required string STRING_NUMERIC_NONE = 6 [default = "-1"];</code>
     */
    public Builder setSTRINGNUMERICNONEBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
      sTRINGNUMERICNONE_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object sTRINGANY_ = "Any";
    /**
     * <code>required string STRING_ANY = 7 [default = "Any"];</code>
     */
    public boolean hasSTRINGANY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required string STRING_ANY = 7 [default = "Any"];</code>
     */
    public java.lang.String getSTRINGANY() {
      java.lang.Object ref = sTRINGANY_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sTRINGANY_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>required string STRING_ANY = 7 [default = "Any"];</code>
     */
    public com.google.protobuf.ByteString
        getSTRINGANYBytes() {
      java.lang.Object ref = sTRINGANY_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sTRINGANY_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string STRING_ANY = 7 [default = "Any"];</code>
     */
    public Builder setSTRINGANY(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
      sTRINGANY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string STRING_ANY = 7 [default = "Any"];</code>
     */
    public Builder clearSTRINGANY() {
      bitField0_ = (bitField0_ & ~0x00000040);
      sTRINGANY_ = getDefaultInstance().getSTRINGANY();
      onChanged();
      return this;
    }
    /**
     * <code>required string STRING_ANY = 7 [default = "Any"];</code>
     */
    public Builder setSTRINGANYBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
      sTRINGANY_ = value;
      onChanged();
      return this;
    }

    private int mAXVLAN_ = 4095;
    /**
     * <pre>
     *A VLAN ID is actually 12 bits of a VLAN tag.
     * </pre>
     *
     * <code>required int32 MAX_VLAN = 8 [default = 4095];</code>
     */
    public boolean hasMAXVLAN() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *A VLAN ID is actually 12 bits of a VLAN tag.
     * </pre>
     *
     * <code>required int32 MAX_VLAN = 8 [default = 4095];</code>
     */
    public int getMAXVLAN() {
      return mAXVLAN_;
    }
    /**
     * <pre>
     *A VLAN ID is actually 12 bits of a VLAN tag.
     * </pre>
     *
     * <code>required int32 MAX_VLAN = 8 [default = 4095];</code>
     */
    public Builder setMAXVLAN(int value) {
      bitField0_ |= 0x00000080;
      mAXVLAN_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *A VLAN ID is actually 12 bits of a VLAN tag.
     * </pre>
     *
     * <code>required int32 MAX_VLAN = 8 [default = 4095];</code>
     */
    public Builder clearMAXVLAN() {
      bitField0_ = (bitField0_ & ~0x00000080);
      mAXVLAN_ = 4095;
      onChanged();
      return this;
    }

    private com.cotx.ovsctl.message.common.VlanId nONE_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.cotx.ovsctl.message.common.VlanId, com.cotx.ovsctl.message.common.VlanId.Builder, VlanIdOrBuilder> nONEBuilder_;
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public boolean hasNONE() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public com.cotx.ovsctl.message.common.VlanId getNONE() {
      if (nONEBuilder_ == null) {
        return nONE_ == null ? com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : nONE_;
      } else {
        return nONEBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public Builder setNONE(com.cotx.ovsctl.message.common.VlanId value) {
      if (nONEBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        nONE_ = value;
        onChanged();
      } else {
        nONEBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public Builder setNONE(
        com.cotx.ovsctl.message.common.VlanId.Builder builderForValue) {
      if (nONEBuilder_ == null) {
        nONE_ = builderForValue.build();
        onChanged();
      } else {
        nONEBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public Builder mergeNONE(com.cotx.ovsctl.message.common.VlanId value) {
      if (nONEBuilder_ == null) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            nONE_ != null &&
            nONE_ != com.cotx.ovsctl.message.common.VlanId.getDefaultInstance()) {
          nONE_ =
            com.cotx.ovsctl.message.common.VlanId.newBuilder(nONE_).mergeFrom(value).buildPartial();
        } else {
          nONE_ = value;
        }
        onChanged();
      } else {
        nONEBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000100;
      return this;
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public Builder clearNONE() {
      if (nONEBuilder_ == null) {
        nONE_ = null;
        onChanged();
      } else {
        nONEBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000100);
      return this;
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public com.cotx.ovsctl.message.common.VlanId.Builder getNONEBuilder() {
      bitField0_ |= 0x00000100;
      onChanged();
      return getNONEFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    public VlanIdOrBuilder getNONEOrBuilder() {
      if (nONEBuilder_ != null) {
        return nONEBuilder_.getMessageOrBuilder();
      } else {
        return nONE_ == null ?
            com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : nONE_;
      }
    }
    /**
     * <pre>
     *TODO
     *这两个的值是在VlanId.java中，通过调用方法来赋值的，这里我就暂时不给它默认值了。
     * </pre>
     *
     * <code>required .VlanId NONE = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.cotx.ovsctl.message.common.VlanId, com.cotx.ovsctl.message.common.VlanId.Builder, VlanIdOrBuilder>
        getNONEFieldBuilder() {
      if (nONEBuilder_ == null) {
        nONEBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.cotx.ovsctl.message.common.VlanId, com.cotx.ovsctl.message.common.VlanId.Builder, VlanIdOrBuilder>(
                getNONE(),
                getParentForChildren(),
                isClean());
        nONE_ = null;
      }
      return nONEBuilder_;
    }

    private com.cotx.ovsctl.message.common.VlanId aNY_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.cotx.ovsctl.message.common.VlanId, com.cotx.ovsctl.message.common.VlanId.Builder, VlanIdOrBuilder> aNYBuilder_;
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public boolean hasANY() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public com.cotx.ovsctl.message.common.VlanId getANY() {
      if (aNYBuilder_ == null) {
        return aNY_ == null ? com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : aNY_;
      } else {
        return aNYBuilder_.getMessage();
      }
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public Builder setANY(com.cotx.ovsctl.message.common.VlanId value) {
      if (aNYBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        aNY_ = value;
        onChanged();
      } else {
        aNYBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      return this;
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public Builder setANY(
        com.cotx.ovsctl.message.common.VlanId.Builder builderForValue) {
      if (aNYBuilder_ == null) {
        aNY_ = builderForValue.build();
        onChanged();
      } else {
        aNYBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      return this;
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public Builder mergeANY(com.cotx.ovsctl.message.common.VlanId value) {
      if (aNYBuilder_ == null) {
        if (((bitField0_ & 0x00000200) == 0x00000200) &&
            aNY_ != null &&
            aNY_ != com.cotx.ovsctl.message.common.VlanId.getDefaultInstance()) {
          aNY_ =
            com.cotx.ovsctl.message.common.VlanId.newBuilder(aNY_).mergeFrom(value).buildPartial();
        } else {
          aNY_ = value;
        }
        onChanged();
      } else {
        aNYBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000200;
      return this;
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public Builder clearANY() {
      if (aNYBuilder_ == null) {
        aNY_ = null;
        onChanged();
      } else {
        aNYBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000200);
      return this;
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public com.cotx.ovsctl.message.common.VlanId.Builder getANYBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getANYFieldBuilder().getBuilder();
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    public VlanIdOrBuilder getANYOrBuilder() {
      if (aNYBuilder_ != null) {
        return aNYBuilder_.getMessageOrBuilder();
      } else {
        return aNY_ == null ?
            com.cotx.ovsctl.message.common.VlanId.getDefaultInstance() : aNY_;
      }
    }
    /**
     * <code>required .VlanId ANY = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.cotx.ovsctl.message.common.VlanId, com.cotx.ovsctl.message.common.VlanId.Builder, VlanIdOrBuilder>
        getANYFieldBuilder() {
      if (aNYBuilder_ == null) {
        aNYBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.cotx.ovsctl.message.common.VlanId, com.cotx.ovsctl.message.common.VlanId.Builder, VlanIdOrBuilder>(
                getANY(),
                getParentForChildren(),
                isClean());
        aNY_ = null;
      }
      return aNYBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:VlanId)
  }

  // @@protoc_insertion_point(class_scope:VlanId)
  private static final com.cotx.ovsctl.message.common.VlanId DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.cotx.ovsctl.message.common.VlanId();
  }

  public static com.cotx.ovsctl.message.common.VlanId getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<com.cotx.ovsctl.message.common.VlanId>
      PARSER = new com.google.protobuf.AbstractParser<com.cotx.ovsctl.message.common.VlanId>() {
    public com.cotx.ovsctl.message.common.VlanId parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new com.cotx.ovsctl.message.common.VlanId(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<com.cotx.ovsctl.message.common.VlanId> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<com.cotx.ovsctl.message.common.VlanId> getParserForType() {
    return PARSER;
  }

  public com.cotx.ovsctl.message.common.VlanId getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

